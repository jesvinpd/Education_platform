{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\Telegram Desktop\\\\cgp placement\\\\Internship\\\\notes\\\\Education_platform\\\\client\\\\src\\\\components\\\\dashboard\\\\CodePanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { python } from '@codemirror/lang-python';\nimport { cpp } from '@codemirror/lang-cpp';\nimport { java } from '@codemirror/lang-java';\nimport TestCases from './TestCases';\nimport './css/CodePanel.css';\nimport { testConnection } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodePanel = ({\n  problem,\n  testResults,\n  onRunCode\n}) => {\n  _s();\n  const [language, setLanguage] = useState('c'); // Default to C++\n  const [code, setCode] = useState(problem.code.c); // Default to C++ code\n  const [activeTestCase, setActiveTestCase] = useState('Case 1');\n  const [customTestCases, setCustomTestCases] = useState([]);\n  const getLanguageExtension = lang => {\n    switch (lang) {\n      case 'python':\n        return python();\n      case 'cpp':\n      case 'c':\n        return cpp();\n      case 'java':\n        return java();\n      default:\n        return cpp();\n    }\n  };\n  const handleLanguageChange = newLanguage => {\n    setLanguage(newLanguage);\n    // Update code template based on selected language\n    setCode(problem.code[newLanguage] || '// Code template not available');\n  };\n  const handleRunCode = () => {\n    // Save custom test cases to testResults before running\n    const allTestCases = [...problem.examples, ...customTestCases.filter(tc => tc.input.trim() && tc.output.trim())];\n\n    // Update testResults with all test cases\n    onRunCode(allTestCases);\n  };\n  useEffect(() => {\n    const testServer = async () => {\n      try {\n        const response = await testConnection();\n        console.log('Server connection successful:', response.data);\n      } catch (error) {\n        console.error('Server connection failed:', error);\n      }\n    };\n    testServer();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-header\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"language-select\",\n        onChange: e => handleLanguageChange(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"c\",\n          children: \"C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cpp\",\n          children: \"C++\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"python\",\n          children: \"Python3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"java\",\n          children: \"Java\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: /*#__PURE__*/_jsxDEV(CodeMirror, {\n        value: code,\n        height: \"400px\",\n        theme: \"dark\",\n        extensions: [getLanguageExtension(language)],\n        onChange: value => setCode(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"run-button\",\n        onClick: handleRunCode,\n        children: \"Run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TestCases, {\n      problem: problem,\n      testResults: testResults,\n      customTestCases: customTestCases,\n      activeTestCase: activeTestCase,\n      setActiveTestCase: setActiveTestCase,\n      setCustomTestCases: setCustomTestCases\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(CodePanel, \"bQPEt3FV19Eo1eXM2WvHfFrgU5I=\");\n_c = CodePanel;\nexport default CodePanel;\nvar _c;\n$RefreshReg$(_c, \"CodePanel\");","map":{"version":3,"names":["React","useState","useEffect","CodeMirror","python","cpp","java","TestCases","testConnection","jsxDEV","_jsxDEV","CodePanel","problem","testResults","onRunCode","_s","language","setLanguage","code","setCode","c","activeTestCase","setActiveTestCase","customTestCases","setCustomTestCases","getLanguageExtension","lang","handleLanguageChange","newLanguage","handleRunCode","allTestCases","examples","filter","tc","input","trim","output","testServer","response","console","log","data","error","className","children","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","height","theme","extensions","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/Telegram Desktop/cgp placement/Internship/notes/Education_platform/client/src/components/dashboard/CodePanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CodeMirror from '@uiw/react-codemirror';\r\nimport { python } from '@codemirror/lang-python';\r\nimport { cpp } from '@codemirror/lang-cpp';\r\nimport { java } from '@codemirror/lang-java';\r\nimport TestCases from './TestCases';\r\nimport './css/CodePanel.css';\r\nimport { testConnection } from '../../services/api';\r\n\r\nconst CodePanel = ({ problem, testResults, onRunCode }) => {\r\n  const [language, setLanguage] = useState('c'); // Default to C++\r\n  const [code, setCode] = useState(problem.code.c); // Default to C++ code\r\n  const [activeTestCase, setActiveTestCase] = useState('Case 1');\r\n  const [customTestCases, setCustomTestCases] = useState([]);\r\n\r\n  const getLanguageExtension = (lang) => {\r\n    switch (lang) {\r\n      case 'python':\r\n        return python();\r\n      case 'cpp':\r\n      case 'c':\r\n        return cpp();\r\n      case 'java':\r\n        return java();\r\n      default:\r\n        return cpp();\r\n    }\r\n  };\r\n\r\n  const handleLanguageChange = (newLanguage) => {\r\n    setLanguage(newLanguage);\r\n    // Update code template based on selected language\r\n    setCode(problem.code[newLanguage] || '// Code template not available');\r\n  };\r\n\r\n  const handleRunCode = () => {\r\n    // Save custom test cases to testResults before running\r\n    const allTestCases = [\r\n      ...problem.examples,\r\n      ...customTestCases.filter(tc => tc.input.trim() && tc.output.trim())\r\n    ];\r\n    \r\n    // Update testResults with all test cases\r\n    onRunCode(allTestCases);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const testServer = async () => {\r\n      try {\r\n        const response = await testConnection();\r\n        console.log('Server connection successful:', response.data);\r\n      } catch (error) {\r\n        console.error('Server connection failed:', error);\r\n      }\r\n    };\r\n    \r\n    testServer();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"code-panel\">\r\n      <div className=\"editor-header\">\r\n        <select \r\n          className=\"language-select\"\r\n          onChange={(e) => handleLanguageChange(e.target.value)}\r\n        >\r\n          <option value=\"c\">C</option>\r\n          <option value=\"cpp\">C++</option>\r\n          <option value=\"python\">Python3</option>\r\n          <option value=\"java\">Java</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"editor-container\">\r\n        <CodeMirror\r\n          value={code}\r\n          height=\"400px\"\r\n          theme=\"dark\"\r\n          extensions={[getLanguageExtension(language)]}\r\n          onChange={(value) => setCode(value)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"action-buttons\">\r\n        <button className=\"run-button\" onClick={handleRunCode}>Run</button>\r\n        <button className=\"submit-button\">Submit</button>\r\n      </div>\r\n\r\n      <TestCases \r\n        problem={problem}\r\n        testResults={testResults}\r\n        customTestCases={customTestCases}\r\n        activeTestCase={activeTestCase}\r\n        setActiveTestCase={setActiveTestCase}\r\n        setCustomTestCases={setCustomTestCases}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodePanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}