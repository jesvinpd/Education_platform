{"ast":null,"code":"const codingProblems = [{\n  questionNo: 1,\n  title: \"Two Sum\",\n  description: `Given an array of integers \\`nums\\` and an integer \\`target\\`, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have **exactly one solution**, and you may not use the *same* element twice.\n\nYou can return the answer in any order.`,\n  examples: [{\n    input: \"nums = [2,7,11,15], target = 9\",\n    output: \"[0,1]\",\n    explanation: \"Because nums[0] + nums[1] == 9, we return [0, 1].\"\n  }, {\n    input: \"nums = [3,2,4], target = 6\",\n    output: \"[1,2]\"\n  }, {\n    input: \"nums = [3,3], target = 6\",\n    output: \"[0,1]\"\n  }],\n  constraints: [\"2 <= nums.length <= 10^4\", \"-10^9 <= nums[i] <= 10^9\", \"-10^9 <= target <= 10^9\", \"Only one valid answer exists.\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"Array\", \"Hash Table\"],\n  hint: \"Try using a hash map to store the complement of each number you've seen so far.\",\n  code: {\n    cpp: \"class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        \\n    }\\n};\",\n    python: \"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        \",\n    c: \"int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\\n    \\n}\",\n    java: \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        \\n    }\\n}\"\n  }\n}, {\n  questionNo: 2,\n  title: \"Valid Parentheses\",\n  description: `Given a string \\`s\\` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.`,\n  examples: [{\n    input: 's = \"()\"',\n    output: \"true\"\n  }, {\n    input: 's = \"()[]{}\"',\n    output: \"true\"\n  }, {\n    input: 's = \"(]\"',\n    output: \"false\"\n  }, {\n    input: 's = \"([)]\"',\n    output: \"false\"\n  }],\n  constraints: [\"1 <= s.length <= 10^4\", \"s consists of parentheses only '()[]{}'.\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"String\", \"Stack\"],\n  hint: \"Use a stack to keep track of opening brackets and match them with closing brackets.\"\n}, {\n  questionNo: 3,\n  title: \"Best Time to Buy and Sell Stock\",\n  description: `You are given an array \\`prices\\` where \\`prices[i]\\` is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.`,\n  examples: [{\n    input: \"prices = [7,1,5,3,6,4]\",\n    output: \"5\",\n    explanation: \"Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\"\n  }, {\n    input: \"prices = [7,6,4,3,1]\",\n    output: \"0\",\n    explanation: \"In this case, no transactions are done and the max profit = 0.\"\n  }],\n  constraints: [\"1 <= prices.length <= 10^5\", \"0 <= prices[i] <= 10^4\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"Array\", \"Dynamic Programming\"],\n  hint: \"Keep track of the minimum price seen so far and calculate profit at each step.\"\n}, {\n  questionNo: 4,\n  title: \"Merge Two Sorted Lists\",\n  description: `You are given the heads of two sorted linked lists \\`list1\\` and \\`list2\\`.\n\nMerge the two lists into one **sorted** list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn the head of the merged linked list.`,\n  examples: [{\n    input: \"list1 = [1,2,4], list2 = [1,3,4]\",\n    output: \"[1,1,2,3,4,4]\"\n  }, {\n    input: \"list1 = [], list2 = []\",\n    output: \"[]\"\n  }, {\n    input: \"list1 = [], list2 = [0]\",\n    output: \"[0]\"\n  }],\n  constraints: [\"The number of nodes in both lists is in the range [0, 50].\", \"-100 <= Node.val <= 100\", \"Both list1 and list2 are sorted in non-decreasing order.\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"Linked List\", \"Recursion\"],\n  hint: \"Use a dummy node to simplify the merging process and compare values iteratively.\"\n}, {\n  questionNo: 5,\n  title: \"Maximum Subarray\",\n  description: `Given an integer array \\`nums\\`, find the subarray with the largest sum, and return its sum.\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.`,\n  examples: [{\n    input: \"nums = [-2,1,-3,4,-1,2,1,-5,4]\",\n    output: \"6\",\n    explanation: \"The subarray [4,-1,2,1] has the largest sum 6.\"\n  }, {\n    input: \"nums = [1]\",\n    output: \"1\",\n    explanation: \"The subarray [1] has the largest sum 1.\"\n  }, {\n    input: \"nums = [5,4,-1,7,8]\",\n    output: \"23\",\n    explanation: \"The subarray [5,4,-1,7,8] has the largest sum 23.\"\n  }],\n  constraints: [\"1 <= nums.length <= 10^5\", \"-10^4 <= nums[i] <= 10^4\"],\n  difficultyLevel: \"Medium\",\n  topics: [\"Array\", \"Dynamic Programming\", \"Divide and Conquer\"],\n  hint: \"Use Kadane's algorithm - keep track of the maximum sum ending at current position.\"\n}, {\n  questionNo: 6,\n  title: \"Contains Duplicate\",\n  description: `Given an integer array \\`nums\\`, return \\`true\\` if any value appears **at least twice** in the array, and return \\`false\\` if every element is distinct.`,\n  examples: [{\n    input: \"nums = [1,2,3,1]\",\n    output: \"true\"\n  }, {\n    input: \"nums = [1,2,3,4]\",\n    output: \"false\"\n  }, {\n    input: \"nums = [1,1,1,3,3,4,3,2,4,2]\",\n    output: \"true\"\n  }],\n  constraints: [\"1 <= nums.length <= 10^5\", \"-10^9 <= nums[i] <= 10^9\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"Array\", \"Hash Table\", \"Sorting\"],\n  hint: \"Use a hash set to track seen elements, or sort the array and check adjacent elements.\"\n}, {\n  questionNo: 7,\n  title: \"Valid Anagram\",\n  description: `Given two strings \\`s\\` and \\`t\\`, return \\`true\\` if \\`t\\` is an anagram of \\`s\\`, and \\`false\\` otherwise.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.`,\n  examples: [{\n    input: 's = \"anagram\", t = \"nagaram\"',\n    output: \"true\"\n  }, {\n    input: 's = \"rat\", t = \"car\"',\n    output: \"false\"\n  }],\n  constraints: [\"1 <= s.length, t.length <= 5 * 10^4\", \"s and t consist of lowercase English letters.\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"Hash Table\", \"String\", \"Sorting\"],\n  hint: \"Count the frequency of each character in both strings or sort both strings and compare.\"\n}, {\n  questionNo: 8,\n  title: \"Binary Search\",\n  description: `Given an array of integers \\`nums\\` which is sorted in ascending order, and an integer \\`target\\`, write a function to search \\`target\\` in \\`nums\\`. If \\`target\\` exists, then return its index. Otherwise, return -1.\n\nYou must write an algorithm with \\`O(log n)\\` runtime complexity.`,\n  examples: [{\n    input: \"nums = [-1,0,3,5,9,12], target = 9\",\n    output: \"4\",\n    explanation: \"9 exists in nums and its index is 4\"\n  }, {\n    input: \"nums = [-1,0,3,5,9,12], target = 2\",\n    output: \"-1\",\n    explanation: \"2 does not exist in nums so return -1\"\n  }],\n  constraints: [\"1 <= nums.length <= 10^4\", \"-10^4 <= nums[i], target <= 10^4\", \"All the integers in nums are unique.\", \"nums is sorted in ascending order.\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"Array\", \"Binary Search\"],\n  hint: \"Use two pointers (left and right) and repeatedly divide the search space in half.\"\n}, {\n  questionNo: 9,\n  title: \"Climbing Stairs\",\n  description: `You are climbing a staircase. It takes \\`n\\` steps to reach the top.\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?`,\n  examples: [{\n    input: \"n = 2\",\n    output: \"2\",\n    explanation: \"There are two ways to climb to the top: 1. 1 step + 1 step, 2. 2 steps\"\n  }, {\n    input: \"n = 3\",\n    output: \"3\",\n    explanation: \"There are three ways to climb to the top: 1. 1 step + 1 step + 1 step, 2. 1 step + 2 steps, 3. 2 steps + 1 step\"\n  }],\n  constraints: [\"1 <= n <= 45\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"Math\", \"Dynamic Programming\", \"Memoization\"],\n  hint: \"This is essentially a Fibonacci sequence. The number of ways to reach step n is the sum of ways to reach step n-1 and n-2.\"\n}, {\n  questionNo: 10,\n  title: \"Reverse Linked List\",\n  description: `Given the \\`head\\` of a singly linked list, reverse the list, and return the reversed list.`,\n  examples: [{\n    input: \"head = [1,2,3,4,5]\",\n    output: \"[5,4,3,2,1]\"\n  }, {\n    input: \"head = [1,2]\",\n    output: \"[2,1]\"\n  }, {\n    input: \"head = []\",\n    output: \"[]\"\n  }],\n  constraints: [\"The number of nodes in the list is the range [0, 5000].\", \"-5000 <= Node.val <= 5000\"],\n  difficultyLevel: \"Easy\",\n  topics: [\"Linked List\", \"Recursion\"],\n  hint: \"Use three pointers: previous, current, and next. Iteratively reverse the links between nodes.\"\n}];\n\n// Export for use in other modules\nexport default codingProblems;","map":{"version":3,"names":["codingProblems","questionNo","title","description","examples","input","output","explanation","constraints","difficultyLevel","topics","hint","code","cpp","python","c","java"],"sources":["C:/Users/user/Downloads/Telegram Desktop/cgp placement/Internship/notes/Education_platform/client/src/dummyData.js"],"sourcesContent":["const codingProblems = [\r\n  {\r\n    questionNo: 1,\r\n    title: \"Two Sum\",\r\n    description: `Given an array of integers \\`nums\\` and an integer \\`target\\`, return indices of the two numbers such that they add up to target.\r\n\r\nYou may assume that each input would have **exactly one solution**, and you may not use the *same* element twice.\r\n\r\nYou can return the answer in any order.`,\r\n    examples: [\r\n      {\r\n        input: \"nums = [2,7,11,15], target = 9\",\r\n        output: \"[0,1]\",\r\n        explanation: \"Because nums[0] + nums[1] == 9, we return [0, 1].\",\r\n      },\r\n      {\r\n        input: \"nums = [3,2,4], target = 6\",\r\n        output: \"[1,2]\",\r\n      },\r\n      {\r\n        input: \"nums = [3,3], target = 6\",\r\n        output: \"[0,1]\",\r\n      },\r\n    ],\r\n    constraints: [\r\n      \"2 <= nums.length <= 10^4\",\r\n      \"-10^9 <= nums[i] <= 10^9\",\r\n      \"-10^9 <= target <= 10^9\",\r\n      \"Only one valid answer exists.\",\r\n    ],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"Array\", \"Hash Table\"],\r\n    hint: \"Try using a hash map to store the complement of each number you've seen so far.\",\r\n    code: {\r\n  cpp: \"class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        \\n    }\\n};\",\r\n  python: \"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        \",\r\n  c: \"int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\\n    \\n}\",\r\n  java: \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        \\n    }\\n}\"\r\n},\r\n\r\n  },\r\n  {\r\n    questionNo: 2,\r\n    title: \"Valid Parentheses\",\r\n    description: `Given a string \\`s\\` containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\r\n\r\nAn input string is valid if:\r\n1. Open brackets must be closed by the same type of brackets.\r\n2. Open brackets must be closed in the correct order.\r\n3. Every close bracket has a corresponding open bracket of the same type.`,\r\n    examples: [\r\n      {\r\n        input: 's = \"()\"',\r\n        output: \"true\",\r\n      },\r\n      {\r\n        input: 's = \"()[]{}\"',\r\n        output: \"true\",\r\n      },\r\n      {\r\n        input: 's = \"(]\"',\r\n        output: \"false\",\r\n      },\r\n      {\r\n        input: 's = \"([)]\"',\r\n        output: \"false\",\r\n      },\r\n    ],\r\n    constraints: [\r\n      \"1 <= s.length <= 10^4\",\r\n      \"s consists of parentheses only '()[]{}'.\",\r\n    ],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"String\", \"Stack\"],\r\n    hint: \"Use a stack to keep track of opening brackets and match them with closing brackets.\",\r\n  },\r\n  {\r\n    questionNo: 3,\r\n    title: \"Best Time to Buy and Sell Stock\",\r\n    description: `You are given an array \\`prices\\` where \\`prices[i]\\` is the price of a given stock on the ith day.\r\n\r\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\r\n\r\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.`,\r\n    examples: [\r\n      {\r\n        input: \"prices = [7,1,5,3,6,4]\",\r\n        output: \"5\",\r\n        explanation:\r\n          \"Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\",\r\n      },\r\n      {\r\n        input: \"prices = [7,6,4,3,1]\",\r\n        output: \"0\",\r\n        explanation:\r\n          \"In this case, no transactions are done and the max profit = 0.\",\r\n      },\r\n    ],\r\n    constraints: [\"1 <= prices.length <= 10^5\", \"0 <= prices[i] <= 10^4\"],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"Array\", \"Dynamic Programming\"],\r\n    hint: \"Keep track of the minimum price seen so far and calculate profit at each step.\",\r\n  },\r\n  {\r\n    questionNo: 4,\r\n    title: \"Merge Two Sorted Lists\",\r\n    description: `You are given the heads of two sorted linked lists \\`list1\\` and \\`list2\\`.\r\n\r\nMerge the two lists into one **sorted** list. The list should be made by splicing together the nodes of the first two lists.\r\n\r\nReturn the head of the merged linked list.`,\r\n    examples: [\r\n      {\r\n        input: \"list1 = [1,2,4], list2 = [1,3,4]\",\r\n        output: \"[1,1,2,3,4,4]\",\r\n      },\r\n      {\r\n        input: \"list1 = [], list2 = []\",\r\n        output: \"[]\",\r\n      },\r\n      {\r\n        input: \"list1 = [], list2 = [0]\",\r\n        output: \"[0]\",\r\n      },\r\n    ],\r\n    constraints: [\r\n      \"The number of nodes in both lists is in the range [0, 50].\",\r\n      \"-100 <= Node.val <= 100\",\r\n      \"Both list1 and list2 are sorted in non-decreasing order.\",\r\n    ],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"Linked List\", \"Recursion\"],\r\n    hint: \"Use a dummy node to simplify the merging process and compare values iteratively.\",\r\n  },\r\n  {\r\n    questionNo: 5,\r\n    title: \"Maximum Subarray\",\r\n    description: `Given an integer array \\`nums\\`, find the subarray with the largest sum, and return its sum.\r\n\r\nA **subarray** is a contiguous non-empty sequence of elements within an array.`,\r\n    examples: [\r\n      {\r\n        input: \"nums = [-2,1,-3,4,-1,2,1,-5,4]\",\r\n        output: \"6\",\r\n        explanation: \"The subarray [4,-1,2,1] has the largest sum 6.\",\r\n      },\r\n      {\r\n        input: \"nums = [1]\",\r\n        output: \"1\",\r\n        explanation: \"The subarray [1] has the largest sum 1.\",\r\n      },\r\n      {\r\n        input: \"nums = [5,4,-1,7,8]\",\r\n        output: \"23\",\r\n        explanation: \"The subarray [5,4,-1,7,8] has the largest sum 23.\",\r\n      },\r\n    ],\r\n    constraints: [\"1 <= nums.length <= 10^5\", \"-10^4 <= nums[i] <= 10^4\"],\r\n    difficultyLevel: \"Medium\",\r\n    topics: [\"Array\", \"Dynamic Programming\", \"Divide and Conquer\"],\r\n    hint: \"Use Kadane's algorithm - keep track of the maximum sum ending at current position.\",\r\n  },\r\n  {\r\n    questionNo: 6,\r\n    title: \"Contains Duplicate\",\r\n    description: `Given an integer array \\`nums\\`, return \\`true\\` if any value appears **at least twice** in the array, and return \\`false\\` if every element is distinct.`,\r\n    examples: [\r\n      {\r\n        input: \"nums = [1,2,3,1]\",\r\n        output: \"true\",\r\n      },\r\n      {\r\n        input: \"nums = [1,2,3,4]\",\r\n        output: \"false\",\r\n      },\r\n      {\r\n        input: \"nums = [1,1,1,3,3,4,3,2,4,2]\",\r\n        output: \"true\",\r\n      },\r\n    ],\r\n    constraints: [\"1 <= nums.length <= 10^5\", \"-10^9 <= nums[i] <= 10^9\"],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"Array\", \"Hash Table\", \"Sorting\"],\r\n    hint: \"Use a hash set to track seen elements, or sort the array and check adjacent elements.\",\r\n  },\r\n  {\r\n    questionNo: 7,\r\n    title: \"Valid Anagram\",\r\n    description: `Given two strings \\`s\\` and \\`t\\`, return \\`true\\` if \\`t\\` is an anagram of \\`s\\`, and \\`false\\` otherwise.\r\n\r\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.`,\r\n    examples: [\r\n      {\r\n        input: 's = \"anagram\", t = \"nagaram\"',\r\n        output: \"true\",\r\n      },\r\n      {\r\n        input: 's = \"rat\", t = \"car\"',\r\n        output: \"false\",\r\n      },\r\n    ],\r\n    constraints: [\r\n      \"1 <= s.length, t.length <= 5 * 10^4\",\r\n      \"s and t consist of lowercase English letters.\",\r\n    ],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"Hash Table\", \"String\", \"Sorting\"],\r\n    hint: \"Count the frequency of each character in both strings or sort both strings and compare.\",\r\n  },\r\n  {\r\n    questionNo: 8,\r\n    title: \"Binary Search\",\r\n    description: `Given an array of integers \\`nums\\` which is sorted in ascending order, and an integer \\`target\\`, write a function to search \\`target\\` in \\`nums\\`. If \\`target\\` exists, then return its index. Otherwise, return -1.\r\n\r\nYou must write an algorithm with \\`O(log n)\\` runtime complexity.`,\r\n    examples: [\r\n      {\r\n        input: \"nums = [-1,0,3,5,9,12], target = 9\",\r\n        output: \"4\",\r\n        explanation: \"9 exists in nums and its index is 4\",\r\n      },\r\n      {\r\n        input: \"nums = [-1,0,3,5,9,12], target = 2\",\r\n        output: \"-1\",\r\n        explanation: \"2 does not exist in nums so return -1\",\r\n      },\r\n    ],\r\n    constraints: [\r\n      \"1 <= nums.length <= 10^4\",\r\n      \"-10^4 <= nums[i], target <= 10^4\",\r\n      \"All the integers in nums are unique.\",\r\n      \"nums is sorted in ascending order.\",\r\n    ],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"Array\", \"Binary Search\"],\r\n    hint: \"Use two pointers (left and right) and repeatedly divide the search space in half.\",\r\n  },\r\n  {\r\n    questionNo: 9,\r\n    title: \"Climbing Stairs\",\r\n    description: `You are climbing a staircase. It takes \\`n\\` steps to reach the top.\r\n\r\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?`,\r\n    examples: [\r\n      {\r\n        input: \"n = 2\",\r\n        output: \"2\",\r\n        explanation:\r\n          \"There are two ways to climb to the top: 1. 1 step + 1 step, 2. 2 steps\",\r\n      },\r\n      {\r\n        input: \"n = 3\",\r\n        output: \"3\",\r\n        explanation:\r\n          \"There are three ways to climb to the top: 1. 1 step + 1 step + 1 step, 2. 1 step + 2 steps, 3. 2 steps + 1 step\",\r\n      },\r\n    ],\r\n    constraints: [\"1 <= n <= 45\"],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"Math\", \"Dynamic Programming\", \"Memoization\"],\r\n    hint: \"This is essentially a Fibonacci sequence. The number of ways to reach step n is the sum of ways to reach step n-1 and n-2.\",\r\n  },\r\n  {\r\n    questionNo: 10,\r\n    title: \"Reverse Linked List\",\r\n    description: `Given the \\`head\\` of a singly linked list, reverse the list, and return the reversed list.`,\r\n    examples: [\r\n      {\r\n        input: \"head = [1,2,3,4,5]\",\r\n        output: \"[5,4,3,2,1]\",\r\n      },\r\n      {\r\n        input: \"head = [1,2]\",\r\n        output: \"[2,1]\",\r\n      },\r\n      {\r\n        input: \"head = []\",\r\n        output: \"[]\",\r\n      },\r\n    ],\r\n    constraints: [\r\n      \"The number of nodes in the list is the range [0, 5000].\",\r\n      \"-5000 <= Node.val <= 5000\",\r\n    ],\r\n    difficultyLevel: \"Easy\",\r\n    topics: [\"Linked List\", \"Recursion\"],\r\n    hint: \"Use three pointers: previous, current, and next. Iteratively reverse the links between nodes.\",\r\n  },\r\n];\r\n\r\n// Export for use in other modules\r\nexport default codingProblems;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}