{"ast":null,"code":"import { parser } from '@lezer/java';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer Java\nparser](https://github.com/lezer-parser/java), extended with\nhighlighting and indentation information.\n*/\nconst javaLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"java\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch|finally)\\b/\n      }),\n      LabeledStatement: flatIndent,\n      SwitchBlock: context => {\n        let after = context.textAfter,\n          closed = /^\\s*\\}/.test(after),\n          isCase = /^\\s*(case|default)\\b/.test(after);\n        return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n      },\n      Block: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      BlockComment: () => null,\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^{/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      [\"Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody \" + \"ConstructorBody InterfaceBody ArrayInitializer\"]: foldInside,\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n  }\n});\n/**\nJava language support.\n*/\nfunction java() {\n  return new LanguageSupport(javaLanguage);\n}\nexport { java, javaLanguage };","map":{"version":3,"names":["parser","LRLanguage","indentNodeProp","continuedIndent","flatIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","javaLanguage","define","name","configure","props","add","IfStatement","except","TryStatement","LabeledStatement","SwitchBlock","context","after","textAfter","closed","test","isCase","baseIndent","unit","Block","closing","BlockComment","Statement","tree","from","to","languageData","commentTokens","line","block","open","close","indentOnInput","java"],"sources":["C:/Users/user/Downloads/Telegram Desktop/cgp placement/Internship/notes/Education_platform/node_modules/@codemirror/lang-java/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/java';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer Java\nparser](https://github.com/lezer-parser/java), extended with\nhighlighting and indentation information.\n*/\nconst javaLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"java\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch|finally)\\b/ }),\n                LabeledStatement: flatIndent,\n                SwitchBlock: context => {\n                    let after = context.textAfter, closed = /^\\s*\\}/.test(after), isCase = /^\\s*(case|default)\\b/.test(after);\n                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;\n                },\n                Block: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                BlockComment: () => null,\n                Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                [\"Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody \" +\n                    \"ConstructorBody InterfaceBody ArrayInitializer\"]: foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/\n    }\n});\n/**\nJava language support.\n*/\nfunction java() {\n    return new LanguageSupport(javaLanguage);\n}\n\nexport { java, javaLanguage };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,SAASC,UAAU,EAAEC,cAAc,EAAEC,eAAe,EAAEC,UAAU,EAAEC,eAAe,EAAEC,YAAY,EAAEC,UAAU,EAAEC,eAAe,QAAQ,sBAAsB;;AAE1J;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,aAAaR,UAAU,CAACS,MAAM,CAAC;EAChDC,IAAI,EAAE,MAAM;EACZX,MAAM,EAAE,aAAaA,MAAM,CAACY,SAAS,CAAC;IAClCC,KAAK,EAAE,CACH,aAAaX,cAAc,CAACY,GAAG,CAAC;MAC5BC,WAAW,EAAE,aAAaZ,eAAe,CAAC;QAAEa,MAAM,EAAE;MAAiB,CAAC,CAAC;MACvEC,YAAY,EAAE,aAAad,eAAe,CAAC;QAAEa,MAAM,EAAE;MAA0B,CAAC,CAAC;MACjFE,gBAAgB,EAAEd,UAAU;MAC5Be,WAAW,EAAEC,OAAO,IAAI;QACpB,IAAIC,KAAK,GAAGD,OAAO,CAACE,SAAS;UAAEC,MAAM,GAAG,QAAQ,CAACC,IAAI,CAACH,KAAK,CAAC;UAAEI,MAAM,GAAG,sBAAsB,CAACD,IAAI,CAACH,KAAK,CAAC;QACzG,OAAOD,OAAO,CAACM,UAAU,GAAG,CAACH,MAAM,GAAG,CAAC,GAAGE,MAAM,GAAG,CAAC,GAAG,CAAC,IAAIL,OAAO,CAACO,IAAI;MAC5E,CAAC;MACDC,KAAK,EAAE,aAAavB,eAAe,CAAC;QAAEwB,OAAO,EAAE;MAAI,CAAC,CAAC;MACrDC,YAAY,EAAEA,CAAA,KAAM,IAAI;MACxBC,SAAS,EAAE,aAAa5B,eAAe,CAAC;QAAEa,MAAM,EAAE;MAAK,CAAC;IAC5D,CAAC,CAAC,EACF,aAAaV,YAAY,CAACQ,GAAG,CAAC;MAC1B,CAAC,+EAA+E,GAC5E,gDAAgD,GAAGP,UAAU;MACjEuB,YAAYA,CAACE,IAAI,EAAE;QAAE,OAAO;UAAEC,IAAI,EAAED,IAAI,CAACC,IAAI,GAAG,CAAC;UAAEC,EAAE,EAAEF,IAAI,CAACE,EAAE,GAAG;QAAE,CAAC;MAAE;IAC1E,CAAC,CAAC;EAEV,CAAC,CAAC;EACFC,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK;IAAE,CAAC;IACjEC,aAAa,EAAE;EACnB;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,SAASC,IAAIA,CAAA,EAAG;EACZ,OAAO,IAAIlC,eAAe,CAACC,YAAY,CAAC;AAC5C;AAEA,SAASiC,IAAI,EAAEjC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}